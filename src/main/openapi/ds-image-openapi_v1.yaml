openapi: 3.0.2
info:
  version: 'v1'
  title: 'ds-image'
  description: |-
    This API implements the functionality of the IIPImage API into the OpenAPI framework used at KB.
    
    The goal is to implement all four of the APIs from [IIPImage](https://iipimage.sourceforge.io/documentation/protocol/). These are as follows:
    - Internet Imaging Protocol
    - IIIF API
    - Deepzoom
    - Zoomify
  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '/${project.artifactId}/v1'
    description: 'Version 1'

paths:

  /IIP:
    get:
      tags:
        - 'ds-image'
      summary: 'Internet Imaging Protocol available through OpenAPI specification'
      operationId: getImage
      parameters:
        - name: FIF
          in: query
          description: |- 
            Full image path. If the FILESYSTEM_PREFIX server parameter has been set, the path is relative to that path.
            
            Note that all IIP protocol requests must start with the FIF parameter
          required: true
          schema:
            type: string
            example: 'image.tif'
        
        - name: JTL
          in: query
          description: |- 
            Return a tile in JPEG format with index n at resolution level r
            
            Note that the JTL parameter must be set after all other parameters
            
            **JTL has to be specified as r,n** 
              
          schema: 
            type: array
            items:
              type: integer
            example: 
              - "r=2"
              - "n=5"
            minItems: 2
            maxItems: 2
          style: form
          explode: false
        
        - name: PTL
          in: query
          description: |- 
            Return a tile in PNG format at resolution level r with index n
            
            Note that the PTL parameter must be set after all other parameters
              
            **PTL has to be specified as r,n**
          schema: 
            type: array
            items:
              type: integer
            example:
              - "r=2"
              - "n=5" 
            minItems: 2
            maxItems: 2
          style: form
          explode: false
          
        - name: CVT
          in: query
          description: |- 
            Export the full image or a region in the specified format (JPEG and PNG currently supported)
              
            Note that the CVT parameter must be set after all other parameters
          schema:
            type: string
            enum: ["jpeg", "png"]
        
        - name: WID
          in: query
          description: |- 
            Specify width in pixels, w, for exports with CVT request.
            
            **WID requires CVT**
          schema:
            type: integer
            example: 800
            
        - name: HEI
          in: query
          description: |-
            Specify height in pixels, h, for exports with CVT requests
            
            **HEI requires CVT**
          schema:
            type: integer
            example: 300
            
        - name: RGN
          in: query
          description: |- 
            Define a region of interest starting at relative coordinates x,y with width w and height h.
            
            For use with CVT requests. All values should be ratios in the range 0 – 1.0
              
            **RGN has to be defined as x,y and requires CVT, WID & HEI** 
          schema: 
            type: array
            items:
              type: integer
            example:
              - "x=20"
              - "y=80" 
            minItems: 2
            maxItems: 2
          style: form
          explode: false
          
        - name: QLT
          in: query
          description: |- 
            Set the output compression level, q.
              
            Valid ranges are JPEG: 0-100 and for PNG: 0-9 where a higher value means more compression
            
            JPEG is always lossy even with a value of 100, while PNG is lossles.
          schema:
            type: integer
            minimum: 0
            maximum: 100
            example: 50
        
        ### SPØRGSMÅL: Her kan man eventuelt tilføje EQ og ST. Skal den derfor laves om til string med dem som muligheder?
        - name: CNT
          in: query
          description: |-
              Contrast adjustment: multiplication of pixel values by factor, c. Value should be an integer or float > 0.
              
              Histogram equalization and contrast stretching can additionally be requested by specifying EQ (or EQUALIZATION) for histogram equalization and ST (or STRETCH) for contrast stretching
          required: false
          schema:
            type: number
            minimum: 0
            exclusiveMinimum: true
            
        - name: SHD
          in: query
          description: |-
            Simulated hill-shading for image normal data. The argument is the angle of incidence of the light source in the horizontal plane (from 12 o’clock), h and the vertical angle of incidence, v, with 0 representing a horizontal direction and -1 vertically downwards
            
            **SHD has to be defined as h,v**
          schema: 
            type: array
            items:
              type: integer
            example:
              - "h=45"
              - "v=80" 
            minItems: 2
            maxItems: 2
          style: form
          explode: false
            
        - name: LYR
          in: query
          description: |- 
            The number of quality layers, l, in an image to decode. This is for file types that can contain multiple quality layers, such as JPEG2000.
            
            For example, a request for LYR=3 will decode only the first 3 quality layers present in the image.
            
            The number of layers decoded will be limited to a maximum given by the MAX_LAYERS environment variable if this has been set in the server configuration. This can be useful to either limit the quality of the images users may see or to speed up decoding by only decoding the faster lower quality layers.
          schema:
            type: integer
            example: 2
        
        - name: ROT
          in: query
          description: |-
            Rotate (and flip) image by given number of degrees, r. Only 90, 180 and 270 supported.
            
            If angle is prefixed by an exclamation mark !, the image is flipped horizontally before rotation (ex: ROT=!90). Vertical flipping can be achieved by combining horizontal flipping and 180° rotation
          schema:
            type: string
          examples:
            Rotate 180 degrees:
              value: "180"
            Flip horizontal and rotate 90 degrees:
              value: "!90"
        
        - name: GAM
          in: query
          description: |- 
            Apply gamma correction, g: each pixel value to the power of g.
            
            If g=log or g=logarithm, the logarithm is applied
          schema:
            type: number 
        
        ### SPRG: How to define colormap schema?    
        - name: CMP
          in: query
          description: "Generate colormap using one of the standard colormap schemes, s: GREY, JET, COLD, HOT, RED, GREEN and BLUE. <br><br> **COL has to be defined as** "
          schema: 
            type: string
            example: 
        
        ### SPRG: How to define coordinate sets    
        - name: PFL
          in: query
          description: |- 
            Export profile in JSON format at resolution r from position x1,y1 to x2, y2.
            
            Only horizontal or vertical profiles are currently supported.
            
            **PFL has to be defined as r:x1,y1-x2,y2**
          schema:
            type: string
            example: "800:20,20-440,440"
        
        ### SPRG: What to do here?    
        - name: CTW
          in: query
          description: |- 
            Color twist / channel recombination. Recombine the available image channels into a new color image by multiplication through a matrix. Columns are separated by commas and rows are separated by semi-colons. Values can also be negative.
            
            Thus, for the 3×3 matrix example provided below, the RGB output image will have bands R = R*r1 + G*g1 + B*b1, G = R*r2 + G*g2 + B*b2, B = R*r3 + G*g3 + B*b3.
            
            For multi-band images, the row length should correspond to the number of available bands within the image. The number of output bands depends on the number of rows in the matrix. Thus, to output a 1 band greyscale image, specify just a single row.

            Examples:
            To perform naive conversion from 3 channel color to 1 channel grayscale: CTW=[0.33,0.33,0.33]
            
            To flip the R and B channels and map an RGB image to BGR: CTW=[0,0,1;0,1,0;1,0,0]
            
            For a 5-band multispectral image, to show the difference between the 5th and 2nd band (i.e. 5th-2nd) and outputting the result as grayscale: CTW=[0,-1,0,0,1]
            
            To create a false-color image from a 4-band RGB-IR image by mapping the G,R,IR channels to the output RGB: CTW=[0,1,0,0;0,0,1,0;0,0,0,1]
          schema: 
            type: string
            example: "[r1,g1,b1;r2,g2,b2;r3,g3,b3]"
          
        - name: INV
          in: query
          description: "Invert image (no argument)"
          schema: 
            
              
      responses:
        # TODO: Update description to explain errors from CVT, WID, HEI and RNG 
        '400':
          description: Either `rdate` or `start_date`+`end_date` are required.

  # TODO: Sample endpoint. Remove when building a concrete application
  # This definition uses path: http://example.com/api/article/article-123A-v2
  /article/{id}:
    get:
      tags:
        - 'ds-image'
      summary: 'Sample OpenAPI definition for a service that constructs a PDF and delivers it'
      operationId: getArticle
      # We assume a very large response here: Too large for showing directly in the Swagger UI.
      # The Content-Disposition for "x-streamingOutput: true" is set to disable inline display in Swagger UI, but
      # keep inline display when the link is pasted directly in a browser. Inspect the generated code for tweaks.
      x-streamingOutput: true
      parameters:
        - name: id
          in: path
          description: 'The ID of the article to process'
          required: true
          schema:
            type: string
            # Note: Constraints are not enforced by Swagger. They are only used as a contract
            minLength: 1
            example: 'article-123A-v2'
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: 'Article ID is unknown'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # TODO: Sample endpoint. Remove when building a concrete application
  # A demonstration of using the same API endpoint for retrieval, deletion and addition/update
  # This is more or less a mirror of /pet in https://petstore3.swagger.io/
  /book/{id}:
    get:
      tags:
        - 'ds-image'
      summary: 'Retrieves metadata for a single book'
      operationId: getBook
      parameters:
        - name: id
          in: path
          description: 'The ID for the book to retrieve'
          required: true
          schema:
            type: string
            # Note: Constraints are not enforced by Swagger. They are only used as a contract
            minLength: 1
            example: 'book_id87'
      responses:
        '200':
          description: 'Structured representation of the Book.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          description: 'Not found'
          content:
            text/plain:
              schema:
                type: string
                example: "HTTP 404: Not Found"
    delete:
      tags:
        - 'ds-image'
      summary: 'Deletes metadata for a single book'
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          description: 'The ID for the book to delete'
          required: true
          schema:
            type: string
            # Note: Constraints are not enforced by Swagger. They are only used as a contract
            minLength: 1
            example: 'book_id87'
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string
                example: 'Metadata for book "book_id87" was successfully deleted'
        '404':
          description: 'Not found'
          content:
            text/plain:
              schema:
                type: string
                example: "HTTP 404: Not Found"

  # TODO: Sample endpoint. Remove when building a concrete application
  /book:
    post:
      tags:
        - 'ds-image'
      summary: 'Add or update a single book'
      operationId: addBook
      responses:
         '200':
           description: 'If the book was added successfully'
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Book'
      requestBody:
         description: 'Add or update a single book'
         required: true
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/Book'
           application/xml:
             schema:
               $ref: '#/components/schemas/Book'
           application/x-www-form-urlencoded:
             schema:
               $ref: '#/components/schemas/Book'

  # TODO: Sample endpoint. Remove when building a concrete application
  # A demonstration of streaming delivery of arbitrary size
  # Also demonstrates different delivery formats (CVS, JSON, JSON-Lines)
  /books:
    get:
      tags:
        - 'ds-image'
      summary: 'Delivers metadata on books'
      operationId: getBooks
      # We assume a very large response here: Too large for showing directly in the Swagger UI.
      # The Content-Disposition for "x-streamingOutput: true" is set to disable inline display in Swagger UI, but
      # keep inline display when the link is pasted directly in a browser. Inspect the generated code for tweaks.
      x-streamingOutput: true
      parameters:
        - name: query
          in: query
          description: 'Search query for the books'
          required: false
          schema:
            type: string
            # Note: Constraints are not enforced by Swagger. They are only used as a contract
            minLength: 1
            example: 'horses OR cows'
        - name: max
          in: query
          description: 'The maximum number of books to return'
          required: false
          schema:
            type: integer
            format: int64
            minimum: 0
            example: 87
        - name: format
          in: query
          required: false
          description: |
            The delivery format. This can also be specified using headers, as seen in the Responses section.
            If both headers and format are specified, format takes precedence.

            * JSONL: Newline separated single-line JSON representations of Books
            * JSON: Valid JSON in the form of a single array of Books
            * XML: Valid XML in the form of a single container with Books
            * CSV: Comma separated, missing values represented with nothing, strings encapsulated in quotes
          schema:
            type: string
            enum:  ['JSONL', 'JSON', 'XML', 'CSV']
            example: 'JSONL'
      responses:
        '200':
          description: 'OK'
          content:
            # application/x-jsonlines is another possibility. Potayto, potahto
            application/x-ndjson:
              schema:
                description: 'Newline separated single-line JSON representations of Books.\n
                              See https://github.com/ndjson/ndjson-spec or https://jsonlines.org/ for the format'
                type: string
            application/json:
              schema:
                description: 'JSON-compliant representation of Books. Note that the structure can be unwieldy for
                              parsing large exports, if the receiver does not use a streaming parser.
                              Consider using application/x-ndjson instead'
                type: array
                items:
                  $ref: '#/components/schemas/Book'
            application/xml:
              schema:
                description: 'XML-compliant representation of Books.'
                type: array
                items:
                  $ref: '#/components/schemas/Book'
            text/csv:
              schema:
                description: 'Comma Separated Values, with strings quoted and newline as the string'
                type: string
        '400':
          description: 'HTTP 400: Bad request'
          content:
            text/plain:
              schema:
                type: string
                example: 'Bad request'

  # TODO: Sample endpoint. Remove when building a concrete application
  # This definition uses multi-part POST to allow for uploading of an image with arguments
  # https://swagger.io/docs/specification/describing-request-body/file-upload/
  /colorizer:
    post:
      tags:
        - 'ds-image'
      summary: 'Perform some image processing and return the result as an image'
      operationId: colorize
      # In this case we would probably want to tweak the generated code for Content-Disposition so that the
      # delivered image is displayed inline when using the Swagger UI. Inspect the generated code for how to do this.
      x-streamingOutput: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - image
              properties:
                # The POSTed image can be retrieved using imageDetail.getDataHandler().getInputStream()
                image:
                  description: 'The image to use as source for the colorization'
                  type: string
                  format: binary
                method:
                  description: 'The algorithm used to colorize the image'
                  type: string
                  enum: [Random, CNN-1, GAN-1]
                  default: GAN-1
                  example: GAN-1
                intensity:
                  description: 'The intensity of the colorization'
                  type: number
                  format: double
                  # Note: Constraints are not enforced by Swagger. They are only used as a contract
                  minimum: 0.0
                  maximum: 1.0
                  default: 0.8
                  example: 0.8

      responses:
        '200':
          description: 'The colorized image'
          content:
            image/jpeg:
              schema:
                type: string

  # The ping service should be in all projects, should not do any advanced processing
  # and should respond quickly with a simple message, e.g. "pong".
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the more detailed /monitor/status is defined below.
  /monitor/ping:
    get:
      tags:
        - Service
      summary: 'Ping the server to check if the server is reachable.'
      operationId: ping
      x-useGenericResponse: false # If enabled the method will return Response
      x-streamingOutput: false # If enabled the method will return StreamingOutput.
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

  # The status service should be in all projects and should provide a list of running jobs,
  # the overall health of the service and similar. While the endpoint should be kept at
  # /monitor/status, the response should be adjusted to fit the application.
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the simple /monitor/ping is defined above.
  /monitor/status:
    get:
      tags:
        - Service
      summary: 'Detailed status / health check for the service'
      operationId: status
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string


components:
  schemas:

    # TODO: Sample component. Remove when building a concrete application
    HelloReply:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: 'Greeting from the API'

    # TODO: Sample component. Remove when building a concrete application
    Book:
      type: object
      required:
        - id
        - title
      properties:
        id:
          type: string
          description: 'Book ID'
          example: 'book_bookid87'
          xml:
            attribute: true
        title:
          type: string
          description: 'Book title'
          example: 'Disappeared by the Storm'
        pages:
          type: integer
          format: int32
          example: 43
      xml:
        name: book

    # Basic status response component.
    # TODO: Extend this to provide application specific status, such as a list of running jobs or free disk space
    Status:
      type: object
      required:
        - application
        - version
      properties:
        application:
          type: string
          description: 'The name of the application'
          example: 'MyService'
        version:
          type: string
          description: 'The version of the application'
          example: '1.2.3'
        build:
          type: string
          description: 'When the application was build'
          example: '2022-04-21T13:37:16Z'
        java:
          type: string
          description: 'The Java version that runs the container'
          example: '11.0.11'
        heap:
          type: integer
          format: int64
          description: 'The maximum number of bytes available to the container in megabytes'
          example: '4096'
        server:
          type: string
          description: 'The hostname for the server'
          example: 'miaplacidus'
        health:
          type: string
          description: 'Self diagnosed health'
          example: 'ok'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
