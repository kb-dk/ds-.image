openapi: 3.0.2
info:
  version: 'v1'
  title: 'ds-image'
  description: |-
    This API implements the functionality of the IIPImage API into the OpenAPI framework used at KB.
    
    The goal is to implement all four of the APIs from [IIPImage](https://iipimage.sourceforge.io/documentation/protocol/). These are as follows:
    - [Internet Imaging Protocol](https://iipimage.sourceforge.io/IIPv105.pdf)
    - [IIIF API](https://iiif.io/api/image/3.0/)
    - Deepzoom
    - Zoomify
    
    Specification for OpenAPI can be found [here](https://swagger.io/docs/specification/about/).
  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '/${project.artifactId}/v1'
    description: 'Version 1'

paths:

  /{identifier}/:
    get:
      tags:
        - 'IIF Image request'
      summary: 'OpenAPI definition for IIIF Image Request API '
      operationId: getImage
      
      # All parameters are required in the original IIIF Image Requests and has to be specified in the implementation in a specific order.
      # The order in the original IIIF Image Requests is as follows: 
      # Region THEN Size THEN Rotation THEN Quality THEN Format
      parameters:
        - name: identifier
          in: path
          description: "The identifier of the requested image. This may be an ARK, URN, filename, or other identifier. Special characters must be URI encoded."
          required: true
          schema:
            type: string
            
        - name: region
          in: query
          description: |- 
            The region parameter defines the rectangular portion of the underlying image content to be returned
            
            Region can be specified by pixel coordinates, percentage or by the value full, which specifies that the full image should be returned.
            
            | Form | Description |
            |------|-------------|
            |**full**|The full image is returned, without any cropping.|
            |**square**|The region is defined as an area where the width and height are both equal to the length of the shorter dimension of the full image. The region may be positioned anywhere in the longer dimension of the full image at the server’s discretion, and centered is often a reasonable default.|
            |**x,y,w,h**|The region of the full image to be returned is specified in terms of absolute pixel values. The value of x represents the number of pixels from the 0 position on the horizontal axis. The value of y represents the number of pixels from the 0 position on the vertical axis. Thus the x,y position 0,0 is the upper left-most pixel of the image. w represents the width of the region and h represents the height of the region in pixels.|
            |**pct:x,y,w,h**|The region to be returned is specified as a sequence of percentages of the full image’s dimensions, as reported in the image information document. Thus, x represents the number of pixels from the 0 position on the horizontal axis, calculated as a percentage of the reported width. w represents the width of the region, also calculated as a percentage of the reported width. The same applies to y and h respectively.|
          required: true
          schema:
            type: string
            
        - name: size
          in: query
          description: |- 
            The size parameter specifies the dimensions to which the extracted region, which might be the full image, is to be scaled. With the exception of the w,h and ^w,h forms, the returned image maintains the aspect ratio of the extracted region as closely as possible. 
            
            Sizes prefixed with ^ allow upscaling of the extracted region when its pixel dimensions are less than the pixel dimensions of the scaled region.
            
            | Form | Description |
            |------|-------------|
            |**max** |  The extracted region is returned at the maximum size available, but will not be upscaled. The resulting image will have the pixel dimensions of the extracted region, unless it is constrained to a smaller size by maxWidth, maxHeight, or maxArea as defined in the Technical Properties section.|
            |**^max**|  The extracted region is scaled to the maximum size permitted by maxWidth, maxHeight, or maxArea as defined in the Technical Properties section. If the resulting dimensions are greater than the pixel width and height of the extracted region, the extracted region is upscaled.|
            |**w,**|  The extracted region should be scaled so that the width of the returned image is exactly equal to w. The value of w must not be greater than the width of the extracted region.|
            |**^w,**|  The extracted region should be scaled so that the width of the returned image is exactly equal to w. If w is greater than the pixel width of the extracted region, the extracted region is upscaled.|
            |**,h**|  The extracted region should be scaled so that the height of the returned image is exactly equal to h. The value of h must not be greater than the height of the extracted region.|
            |**^,h**|  The extracted region should be scaled so that the height of the returned image is exactly equal to h. If h is greater than the pixel height of the extracted region, the extracted region is upscaled.|
            |**pct:n**|  The width and height of the returned image is scaled to n percent of the width and height of the extracted region. The value of n must not be greater than 100.|
            |**^pct:n**|  The width and height of the returned image is scaled to n percent of the width and height of the extracted region. For values of n greater than 100, the extracted region is upscaled.|
            |**w,h**|  The width and height of the returned image are exactly w and h. The aspect ratio of the returned image may be significantly different than the extracted region, resulting in a distorted image. The values of w and h must not be greater than the corresponding pixel dimensions of the extracted region.|
            |**^w,h**|  The width and height of the returned image are exactly w and h. The aspect ratio of the returned image may be significantly different than the extracted region, resulting in a distorted image. If w and/or h are greater than the corresponding pixel dimensions of the extracted region, the extracted region is upscaled.|
            |**!w,h**|  The extracted region is scaled so that the width and height of the returned image are not greater than w and h, while maintaining the aspect ratio. The returned image must be as large as possible but not larger than the extracted region, w or h, or server-imposed limits.|
            |**^!w,h**|  The extracted region is scaled so that the width and height of the returned image are not greater than w and h, while maintaining the aspect ratio. The returned image must be as large as possible but not larger than w, h, or server-imposed limits.|
          required: true
          schema:
            type: string
            
        - name: rotation
          in: query
          description: |-
            The rotation parameter specifies mirroring and rotation. A leading exclamation mark (“!”) indicates that the image should be mirrored by reflection on the vertical axis before any rotation is applied.
            
            The numerical value represents the number of degrees of clockwise rotation, and may be any floating point number from 0 to 360.
            
            | Form | Description |
            |------|-------------|
            |**n**|The degrees of clockwise rotation from 0 up to 360.|
            |**!n**|The image should be mirrored and then rotated as above.|
            
            In most cases, rotation will change the width and height dimensions of the returned image. The service should return an image that contains all of the image contents requested in the region and size parameters, even if the dimensions of the returned image file are different than specified in the size parameter. The image contents should not be scaled as a result of the rotation, and there should be no additional space between the corners of the rotated image contents and the bounding box of the returned image.

            For rotations which are not multiples of 90 degrees, it is recommended that the client request the image in a format that supports transparency, such as png, and that the server return the image with a transparent background. There is no facility in the API for the client to request a particular background color or other fill pattern.
          required: true
          schema:
            type: string
            
        - name: quality
          in: query
          description: |-
            The quality parameter determines whether the image is delivered in color, grayscale or black and white.
            
            | Form | Description |
            |------|-------------|
            |**color**|  The image is returned with all of its color information.|
            |**gray**|  The image is returned in grayscale, where each pixel is black, white or any shade of gray in between.|
            |**bitonal**|  The image returned is bitonal, where each pixel is either black or white.|
            |**default**|  The image is returned using the server’s default quality (e.g. color, gray or bitonal) for the image.|
            
            The default quality exists to support [level 0 compliant implementations](https://iiif.io/api/image/3.0/compliance/#quality) that may not know the qualities of individual images in their collections. It also provides a convenience for clients that know the values for all other parameters of a request except the quality (e.g. .../full/120,80/90/{quality}.png to request a thumbnail) in that a preliminary image information request that would only serve to find out which qualities are available can be avoided.

          required: true
          schema:
            type: string
            enum: ["color","gray","bitonal","default"]
            default: "default"
        
        - name: format
          in: query
          description: |-
            The format of the returned image is expressed as a suffix, mirroring common filename extensions.
          required: true
          schema:
            type: string
            enum: ["jpg","tif","png","gif","jp2","pdf","webp"]
            
      x-streamingOutput: true        
      responses:
        '200':
          description: 'Succes!'
          content:
            image/*:
              schema:
                type: string
                format: binary
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: |-
            Bad Request. Please check the formating of the parameters: region, size and rotation.
            
            Check if the requested region’s height or width is zero, or if the region is entirely outside the bounds of the reported dimensions
            
            Requests for sizes not prefixed with ^ that result in a scaled region with pixel dimensions greater than the pixel dimensions of the extracted region are errors that should result in a 400 (Bad Request) status code.
            
            Check for syntax errors in size parameter
            
            A rotation value that is out of range or unsupported should result in a 400 (Bad Request) status code.
            
            
  /{identifier}/info.json:
    get:
      tags:
        - 'IIIF Image information'
      summary: 'OpenAPI definition for IIIF Image Information Request API '
      operationId: getImageInformation
      parameters:
      - name: identifier
        in: path
        description: "The identifier of the requested image. This may be an ARK, URN, filename, or other identifier. Special characters must be URI encoded."
        required: true
        schema:
          type: string
      
      x-streamingOutput: true
      responses:
        '200':
            description: 'Succes!'
            content: 
              application/ld+json:
                schema:
                  type: object
                  properties:
                    # IIIF uses @context. How do we implement the @ in the OpenAPI YAML
                    context:
                      type: string
                      description: URI of image
                    id:
                      type: string
                      description:   The base URI of the image as defined in URI Syntax, including scheme, server, prefix and identifier without a trailing slash.
                    type:
                      type: string
                      description: The type for the Image API. The value must be the string ImageService3.
                    protocol:
                      type: string
                      description: The URI http://iiif.io/api/image which can be used to determine that the document describes an image service which is a version of the IIIF Image API.
                    profile:
                      type: string
                      description: A string indicating the highest compliance level which is fully supported by the service. The value must be one of level0, level1, or level2.
                    width:
                      type: integer
                      description: The width in pixels of the full image, given as an integer.
                    height:
                      type: integer
                      description: The height in pixels of the full image, given as an integer.
                    maxWidth:
                      type: integer
                      description: The maximum width in pixels supported for this image. Clients must not expect requests with a width greater than this value to be supported. maxWidth must be specified if maxHeight is specified.
                    maxHeight:
                      type: integer
                      description: The maximum height in pixels supported for this image. Clients must not expect requests with a height greater than this value to be supported. If maxWidth is specified and maxHeight is not, then clients should infer that maxHeight = maxWidth.
                    maxArea:
                      type: integer
                      description: The maximum area in pixels supported for this image. Clients must not expect requests with a width*height greater than this value to be supported.
                    sizes:
                      type: array
                      description: An array of JSON objects with the height and width properties. These sizes specify preferred values to be provided in the w,h syntax of the size request parameter for scaled versions of the full image
                      items:
                        type: object
                        properties:
                          type:
                            type: string
                            description: The type of the object. If present, the value must be the string Size.
                          width:
                            type: integer
                            description: The width in pixels of the image to be requested, given as an integer.
                          height:
                            type: integer
                            description: The height in pixels of the image to be requested, given as an integer.
                        required:
                        - width
                        - height
                    tiles:
                      type: array
                      description: TODO ADD
                      items:
                        type: object
                        properties: 
                          type:
                            type: string
                            description: The type of the object. If present, the value must be the string Tile.
                          scaleFactors:
                            type: integer
                            description: The set of resolution scaling factors for the image’s predefined tiles, expressed as positive integers by which to divide the full size of the image. For example, a scale factor of 4 indicates that the service can efficiently deliver images at 1/4 or 25% of the height and width of the full image. A particular scale factor value should appear only once in the tiles array.
                            minimum: 1
                          width:
                            type: integer
                            description: The width in pixels of the predefined tiles to be requested, given as an integer.
                          height:
                            type: integer
                            description: The height in pixels of the predefined tiles to be requested, given as an integer. If it is not specified in the JSON, then it defaults to the same as width, resulting in square tiles.
                        required:
                        - scaleFactor
                        - width
                    preferredFormats:
                      description: An array of strings that are the preferred format parameter values, arranged in order of preference. The format parameter values listed must be among those specified in the referenced profile or listed in the extraFormats property
                      type: array
                      items:
                        type: string
                    rights:
                      type: string
                      description: A string that identifies a license or rights statement that applies to the content of this image. The value of this property must be a string drawn from the set of Creative Commons license URIs, the RightsStatements.org rights statement URIs, or those added via the Registry of Known Extensions mechanism. The inclusion of this property is informative, and for example could be used to display an icon representing the rights assertions.
                    extraQualities:
                      type: array
                      description: An array of strings that can be used as the quality parameter, in addition to default.
                      items:
                        type: string
                    extraFormats:
                      type: array
                      description: An array of strings that can be used as the format parameter, in addition to the ones specified in the referenced profile.
                      items:
                        type: string
                    # QUESTION: extraFeatures takes a specific list of strings. Is that to be defined in this YAML file or is that done elsewhere?
                    extraFeatures:
                      type: array
                      description: An array of strings identifying features supported by the service, in addition to the ones specified in the referenced profile. These strings are defined either in the table below or by registering an extension.
                      items:
                        type: string
                    partOf: 
                      type: array
                      description:   A link to another resource that references this image service, for example a link to a Canvas or Manifest. The value must be an array of JSON objects. Each item must have the id and type properties, and should have the label property.
                      items: 
                        type: object
                        properties:
                          id:
                            type: string
                            description: The URI of the external resource. (The @id property may be used in service objects for backwards compatibility as described above.)
                          type:
                            type: string
                            description: The type or class of this resource. Recommendations for basic types such as image, text or audio are given in the Presentation API. (The @type property may be used in service objects for backwards compatibility as described above.)
                          label:
                            type: string
                            description: A human-readable label for this resource. The label property can be fully internationalized, and each language can have multiple values. This pattern is described in more detail in the languages section of the Presentation API.
                        required:
                        - id
                        - type
                    seeAlso:
                      type: array
                      description: A link to an external, machine-readable resource that is related to this resource, such as an XML or RDF description. Properties of the external resource should be given to help the client select between multiple descriptions (if provided), and to make appropriate use of the document. The URI of the document must identify a single representation of the data in a particular format. The value must be an array of JSON objects. Each item must have the id and type properties, and should have the label, format and profile properties
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: The URI of the external resource. (The @id property may be used in service objects for backwards compatibility as described above.)
                          type:
                            type: string
                            description: The type or class of this resource. Recommendations for basic types such as image, text or audio are given in the Presentation API. (The @type property may be used in service objects for backwards compatibility as described above.)
                          label:
                            type: string
                            description: A human-readable label for this resource. The label property can be fully internationalized, and each language can have multiple values. This pattern is described in more detail in the languages section of the Presentation API.
                          format: 
                            type: string
                            description: The specific media type (often called a MIME type) for this content resource, for example “image/jpeg”. This is important for distinguishing different formats of the same overall type of resource, such as distinguishing text in XML from plain text. The value must be a string, and it should be the value of the Content-Type header returned when this resource is dereferenced.
                          profile:
                            type: string
                            description: A schema or named set of functionality available from this resource. The profile can further clarify the type and/or format of an external resource. The value must be a string, either taken from the Registry of Profiles or a URI.
                        required:
                        - id
                        - type
                    service:
                      type: array
                      description: A reference to an external service that the client might interact with directly to gain additional information or functionality, for example a link to an authentication service. The value must be an array of JSON objects. Each object will have properties depending on the service’s definition, but must have either the id and type properties, or the @id and @type properties for backwards compatibility with other IIIF APIs. Each object should have a profile property. See the Service Registry for known service type
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: The URI of the external resource. (The @id property may be used in service objects for backwards compatibility as described above.)
                          type:
                            type: string
                            description: The type or class of this resource. Recommendations for basic types such as image, text or audio are given in the Presentation API. (The @type property may be used in service objects for backwards compatibility as described above.)
                          profile:
                            type: string
                            description: A schema or named set of functionality available from this resource. The profile can further clarify the type and/or format of an external resource. The value must be a string, either taken from the Registry of Profiles or a URI.
                        required: 
                        - id
                        - type
                  required:
                  - context
                  - id
                  - type
                  - protocol
                  - profile
                  - width
                  - height
 # The ping service should be in all projects, should not do any advanced processing
  # and should respond quickly with a simple message, e.g. "pong".
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the more detailed /monitor/status is defined below.
  /monitor/ping:
    get:
      tags:
        - Service
      summary: 'Ping the server to check if the server is reachable.'
      operationId: ping
      x-useGenericResponse: false # If enabled the method will return Response
      x-streamingOutput: false # If enabled the method will return StreamingOutput.
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

  # The status service should be in all projects and should provide a list of running jobs,
  # the overall health of the service and similar. While the endpoint should be kept at
  # /monitor/status, the response should be adjusted to fit the application.
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the simple /monitor/ping is defined above.
  /monitor/status:
    get:
      tags:
        - Service
      summary: 'Detailed status / health check for the service'
      operationId: status
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

components:
  schemas:
    # Basic status response component.
    Status:
      type: object
      required:
        - application
        - version
      properties:
        application:
          type: string
          description: 'The name of the application'
          example: 'MyService'
        version:
          type: string
          description: 'The version of the application'
          example: '1.2.3'
        build:
          type: string
          description: 'When the application was build'
          example: '2022-04-21T13:37:16Z'
        java:
          type: string
          description: 'The Java version that runs the container'
          example: '11.0.11'
        heap:
          type: integer
          format: int64
          description: 'The maximum number of bytes available to the container in megabytes'
          example: '4096'
        server:
          type: string
          description: 'The hostname for the server'
          example: 'miaplacidus'
        health:
          type: string
          description: 'Self diagnosed health'
          example: 'ok'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
